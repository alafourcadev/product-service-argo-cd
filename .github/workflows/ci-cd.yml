name: Build and Deploy to ArgoCD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: jouncato
  IMAGE_NAME: product-service-argo-cd
  KUBERNETES_VERSION: 1.28.0

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Importante: Usar npm install en lugar de npm ci
      # para generar un package-lock.json actualizado
      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Run security audit
        run: npm audit --production || true  # No fallar si hay vulnerabilidades

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Crear directorio k8s si no existe
      - name: Ensure k8s directory exists
        run: mkdir -p k8s

      # Crear los manifiestos de Kubernetes si no existen (aseguramos que funcionará el CI/CD)
      - name: Create Kubernetes manifests if they don't exist
        run: |
          if [ ! -f k8s/deployment.yaml ]; then
            cat > k8s/deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: product-service
            labels:
              app: product-service
          spec:
            replicas: 2
            strategy:
              type: RollingUpdate
              rollingUpdate:
                maxSurge: 1
                maxUnavailable: 0
            selector:
              matchLabels:
                app: product-service
            template:
              metadata:
                labels:
                  app: product-service
              spec:
                containers:
                - name: product-service
                  image: jouncato/product-service-v1:latest
                  ports:
                  - containerPort: 3000
                  env:
                  - name: DB_NAME
                    valueFrom:
                      configMapKeyRef:
                        name: product-service-config
                        key: DB_NAME
                  - name: DB_HOST
                    valueFrom:
                      configMapKeyRef:
                        name: product-service-config
                        key: DB_HOST
                  - name: DB_PORT
                    valueFrom:
                      configMapKeyRef:
                        name: product-service-config
                        key: DB_PORT
                  - name: DB_USER
                    valueFrom:
                      secretKeyRef:
                        name: product-service-secret
                        key: DB_USER
                  - name: DB_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: product-service-secret
                        key: DB_PASSWORD
                  - name: NODE_ENV
                    value: "production"
                  resources:
                    requests:
                      cpu: 100m
                      memory: 128Mi
                    limits:
                      cpu: 500m
                      memory: 512Mi
                  livenessProbe:
                    httpGet:
                      path: /api/health
                      port: 3000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  readinessProbe:
                    httpGet:
                      path: /api/health
                      port: 3000
                    initialDelaySeconds: 15
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
          EOF
          fi

          if [ ! -f k8s/service.yaml ]; then
            cat > k8s/service.yaml << 'EOF'
          apiVersion: v1
          kind: Service
          metadata:
            name: product-service
            labels:
              app: product-service
          spec:
            type: ClusterIP
            ports:
            - port: 80
              targetPort: 3000
              protocol: TCP
              name: http
            selector:
              app: product-service
          EOF
          fi

          if [ ! -f k8s/configmap.yaml ]; then
            cat > k8s/configmap.yaml << 'EOF'
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: product-service-config
          data:
            DB_NAME: "postgres"
            DB_HOST: "192.168.10.16"
            DB_PORT: "5432"
          EOF
          fi

          if [ ! -f k8s/secret.yaml ]; then
            cat > k8s/secret.yaml << 'EOF'
          apiVersion: v1
          kind: Secret
          metadata:
            name: product-service-secret
          type: Opaque
          data:
            DB_USER: cG9zdGdyZXM=
            DB_PASSWORD: cG9zdGdyZXM=
          EOF
          fi

      # Actualizar el imagen tag en el manifiesto de deployment
      - name: Update image tag in deployment
        run: |
          sed -i "s|image: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" k8s/deployment.yaml

      # Crear configuración de ArgoCD si no existe
      - name: Create ArgoCD application manifest if it doesn't exist
        run: |
          if [ ! -f argocd-application.yaml ]; then
            cat > argocd-application.yaml << 'EOF'
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: product-service
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: https://github.com/jouncato/product-service-argo-cd.git
              targetRevision: HEAD
              path: k8s
            destination:
              server: https://kubernetes.default.svc
              namespace: default
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
              retry:
                limit: 5
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
          EOF
          fi

      # Commit y push de los cambios
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add k8s/ argocd-application.yaml
          git commit -m "Update image tag to ${{ github.sha }} and ensure k8s manifests" || echo "No changes to commit"
          git push || (git pull --rebase && git push)

  verify-deployment:
    needs: update-manifests
    runs-on: ubuntu-latest
    steps:
      - name: Wait for ArgoCD sync
        run: |
          echo "Waiting for ArgoCD to sync the application..."
          echo "ArgoCD will automatically detect changes and deploy the application."
          
      - name: Success message
        run: |
          echo "======================= DEPLOYMENT INFORMATION ======================="
          echo "Deployment triggered successfully!"
          echo "Image: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Kubernetes manifests have been updated in the repository."
          echo "ArgoCD will automatically deploy the application."
          echo "===================================================================="
